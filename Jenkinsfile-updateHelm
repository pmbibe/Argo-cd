    def userGit = "pmbibe"
    def repository = "https://github.com/pmbibe/Argo-cd"
    def branch = "main"
    def pathRepo = ".deploy"
    def pathIndex = "index.yaml"
    def helmHost = "167.172.80.13"
    def helmHostPath = "/usr/share/nginx/html/helm.petw.world"
    def userHelm = "jenkins"
    node("jenkins-agent") {
            stage("Pull code from GitLab"){
                    git branch: "${branch}", credentialsId: "${userGit}", url: "${repository}"
            }
            stage("Install helm") {
                sh 'curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh && rm -rf get_helm.sh'
            }
            stage ("Update Helm") {
                currentHelmVersion = sh(
                    script: 'cat Chart.yaml | awk \'/version:/ {print $2}\'', 
                    returnStdout: true
                    ).trim()
                currentAppVersion = sh(
                    script: 'cat Chart.yaml | awk \'/appVersion:/ {print $2}\'', 
                    returnStdout: true
                    ).trim()
                try {
                    timeout(time: 5, unit: 'SECONDS') {
                            versions = input id: 'UpdateHelm', 
                                            message: 'Version and App Version', 
                                            parameters: [string(defaultValue: "${currentHelmVersion}", 
                                                                description: "Current helm version ${currentHelmVersion}", 
                                                                name: 'Version'), 
                                                        string(defaultValue: "${currentAppVersion}", 
                                                                description: "Current Application version ${currentAppVersion}", 
                                                                name: 'AppVersion')]
                            helmVersion = versions.Version?:''
                            appVersion = versions.AppVersion?:''
                    }
                } catch(err) {
                    def user = err.getCauses()[0].getUser()
                        if('SYSTEM' == user.toString()) {                                
                            echo ("Input timeout expired, Current version will be used")
                            helmVersion = params.defaultHelmVersion
                            appVersion = params.defaultAppVersion
                        } else {
                            echo "Input aborted by: [${user}]"
                            error("Pipeline aborted by: [${user}]")
                        }
                    }            
                isSuccess0 = sh (
                        script: """sed -i 's/version: ${currentHelmVersion}/version: ${helmVersion}/' Chart.yaml""",
                        returnStatus: true
                ) == 0
                isSuccess1 = sh (
                        script: """sed -i 's/appVersion: ${currentAppVersion}/appVersion: ${appVersion}/' Chart.yaml""",
                        returnStatus: true
                ) == 0
                if (isSuccess0 && isSuccess1) {
                    echo "Update success"
                } else {
                    warnError('Error') {
                        }
                }
            }
            stage("Helm Package") {
                sh("helm package . --destination ${pathRepo}")
            }
            stage("Helm index") {
                if (fileExists("${pathIndex}")) {
                    sh("helm repo index . --merge ${pathIndex}")
                } else {
                    sh("helm repo index ${pathIndex}")
                }
                
            }
            stage("Upload Helm") {
                updates = [:]
                updates[0] = {
                    stage("Update to Server") {
                        withCredentials([sshUserPrivateKey(credentialsId: "${userHelm}", keyFileVariable: 'KEY', usernameVariable: 'USER')]) {
                            sh("mkdir -p ~/.ssh && chmod 0700 ~/.ssh")
                            sh("ssh-keyscan -t ecdsa-sha2-nistp256,ssh-ed25519 ${helmHost} >> ~/.ssh/known_hosts")
                            sh(""" scp -i ${KEY} ${pathIndex} ${USER}@${helmHost}:${helmHostPath} """)
                            sh(""" scp -i ${KEY} ${pathRepo}/* ${USER}@${helmHost}:${helmHostPath}/${pathRepo} """)
                            
                        }
                    }
                }
                updates[1] = {
                    stage("Update to Github") {
                        withCredentials([gitUsernamePassword(credentialsId: "${userGit}")]) {
                                sh("git add -A")
                                sh('git config --global user.name "jenkins"')
                                sh('git config --global user.email "jenkins@local.com"')
                                sh('git commit -m "Update version"')
                                sh("git push ${repository}")
                            } 
                        
                    }
                }
                parallel updates
            }

            }

